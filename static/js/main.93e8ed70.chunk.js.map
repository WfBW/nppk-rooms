{"version":3,"sources":["components/room.js","components/otherRoom.js","App.js","serviceWorker.js","index.js"],"names":["Room","style","name","this","props","data","title","className","src","photo","research","owner","href","owner_email","React","Component","OtherRoom","description","App","state","Rooms","OtherRooms","target","map","item","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sldAqBeA,E,iLAjBX,OACE,yBAAKC,MAAO,CAAC,OAAS,UACpB,6BACA,uBAAGC,KAAMC,KAAKC,MAAMC,KAAKH,OACzB,4BACGC,KAAKC,MAAMC,KAAKC,OAEnB,yBAAKC,UAAU,gBAAgBC,IAAK,WAAWL,KAAKC,MAAMC,KAAKI,QAC/D,4BAAI,oJACJ,2BAAIN,KAAKC,MAAMC,KAAKK,UACpB,4BAAI,6FAAoBP,KAAKC,MAAMC,KAAKM,OACxC,4BAAI,iHAAwB,uBAAGC,KAAM,UAAUT,KAAKC,MAAMC,KAAKQ,aAAcV,KAAKC,MAAMC,KAAKQ,mB,GAblFC,IAAMC,WCiBVC,E,iLAfX,OACE,yBAAKf,MAAO,CAAC,OAAS,UACpB,6BACA,uBAAGC,KAAMC,KAAKC,MAAMC,KAAKH,OACzB,4BACGC,KAAKC,MAAMC,KAAKC,OAEnB,yBAAKC,UAAU,gBAAgBC,IAAK,WAAWL,KAAKC,MAAMC,KAAKI,QAC/D,4BAAI,iFACJ,2BAAIN,KAAKC,MAAMC,KAAKY,kB,GAXJH,IAAMC,WCkCfG,E,YAxBb,WAAYd,GAAO,IAAD,8BAChB,4CAAMA,KACDe,MAAQ,CACXC,MAAOA,EACPC,WAAYA,GAJE,E,sEAQhB,OACE,6BACE,4BAAQd,UAAU,yBAChB,uBAAGK,KAAK,qBAAqBU,OAAO,UAAS,sJAE/C,yBAAKf,UAAU,aACb,gKACCJ,KAAKgB,MAAMC,MAAMG,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAMnB,KAAMmB,OAC1C,sHACCrB,KAAKgB,MAAME,WAAWE,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAWnB,KAAMmB,a,GAlB5CV,IAAMC,WCCJU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.93e8ed70.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Room extends React.Component{\r\n  render(){\r\n    return(\r\n      <div style={{\"height\":\"100vh\"}}>\r\n        <hr/>\r\n        <a name={this.props.data.name}/>\r\n        <h4>\r\n          {this.props.data.title}\r\n        </h4>\r\n        <img className=\"img-thumbnail\" src={\"./media/\"+this.props.data.photo}/>\r\n        <h6><b>Области исследований:</b></h6>\r\n        <p>{this.props.data.research}</p>\r\n        <h6><b>Заведующий: </b>{this.props.data.owner}</h6>\r\n        <h6><b>Почта для связи: </b><a href={\"mailto:\"+this.props.data.owner_email}>{this.props.data.owner_email}</a></h6>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Room;\r\n","import React from 'react';\r\n\r\nclass OtherRoom extends React.Component{\r\n  render(){\r\n    return(\r\n      <div style={{\"height\":\"100vh\"}}>\r\n        <hr/>\r\n        <a name={this.props.data.name}/>\r\n        <h4>\r\n          {this.props.data.title}\r\n        </h4>\r\n        <img className=\"img-thumbnail\" src={\"./media/\"+this.props.data.photo}/>\r\n        <h6><b>Описание:</b></h6>\r\n        <p>{this.props.data.description}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OtherRoom;\r\n","import React from 'react';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport Rooms from './rooms.json';\nimport OtherRooms from './otherRooms.json';\n\nimport Room from './components/room';\nimport OtherRoom from './components/otherRoom';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      Rooms: Rooms,\n      OtherRooms: OtherRooms\n    }\n  }\n  render(){\n    return (\n      <div>\n        <header className=\"container text-center\">\n          <a href=\"http://npedkol.ru/\" target=\"_blank\"><h2>Официальный сайт НППК</h2></a>\n        </header>\n        <div className=\"container\">\n          <h3>Лаборатории и кабинеты (IT):</h3>\n          {this.state.Rooms.map(item => <Room data={item} />)}\n          <h3>Другие кабинеты:</h3>\n          {this.state.OtherRooms.map(item => <OtherRoom data={item} />)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}